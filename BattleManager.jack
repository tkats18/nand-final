class BattleManager{
    
    field TableManager table;
    field SquareCursor cursor;

    field boolean userTurn, gameEnded;
    field Random random;
    field int choiseLen;
    field Array choiseArray;
    field Coord startingShipComputer;
    field boolean isDirectionRandomized;

    
    constructor BattleManager new (TableManager tableManager){

        let table = tableManager;
        let cursor = SquareCursor.new(false);
        
        return this;
    }
    
    method void userActionMethod(){

        var int userAction;
        var char key;

        while(userTurn){

            while( (Keyboard.keyPressed() = 0) ) {}
            let key = Keyboard.keyPressed();
            while( ~(Keyboard.keyPressed() = 0)) {}

            let userAction = userActionPerform(key,cursor);
            //none
            if (userAction = 0){
                //continue
            }
            // stroke 1
            if (userAction = 1){
                let gameEnded = table.checkGameEnd();
                if (gameEnded){
                    let userTurn = false;    
                }
            }
            //failed to stroke 2
            if (userAction = 2){
                let userTurn = false;
            }
        }
        return;
    }

    method int start(){

        let choiseLen = -1;
        let choiseArray = table.getComputerChoiseArray();
        let isDirectionRandomized = false;
        let userTurn = true;
        let gameEnded = false;
        let random = table.getRandom();
        do cursor.drawCursor(false);

        
        while(~(gameEnded)){
            if (userTurn){
                do userActionMethod();
            }else{
                do computerActionMethod();
            }
            let gameEnded = table.checkGameEnd();
        }

        return table.checkWhoWon();
    }

    method void computerActionMethod(){
        var int rand, computerAction;
        var Coord s;
        var Square sq;

        while(~(userTurn)){
            if (choiseLen=-1){
                let s  = table.generateRandomUnstroke();
            }else{
                let rand = random.generateRandom(choiseLen);
                let sq = table.getComputerSquare(choiseArray[rand]); 
                let s = sq.getPos();
            }
            
            do Sys.wait(100);
            let computerAction = table.strikePlayer(s);
            
            // //stroke and sunk 3
            if (computerAction = 3){
                let gameEnded = table.checkGameEnd();
                if (gameEnded){
                    let userTurn = true;    
                }else{
                    let choiseLen = -1;
                    let isDirectionRandomized = false;
                }
            }

            //stroke 1
            if (computerAction = 1){
                let gameEnded = table.checkGameEnd();
                if (gameEnded){
                    let userTurn = true;    
                }else{
                    if (~(isDirectionRandomized)){
                        let choiseArray = table.getUnstrokeNeighbours(s);
                        let choiseLen = table.getUnstrokeNeighbourNum(s);
                        let isDirectionRandomized = true;
                        let startingShipComputer = s;
                    }else{
                        let choiseArray = table.getUnstrokeNeighboursInOneDir(s,startingShipComputer);
                        let choiseLen = table.getUnstrokeNeighboursInOneDirNum(s,startingShipComputer); 
                    }
                }
            }

            //failed to stroke 2
            if (computerAction = 2){
                let userTurn = true;
                if(~(isDirectionRandomized)){
                    let choiseLen = -1;
                }
            }
        }
        return;
    }


    method int userActionPerform(int key,SquareCursor cursor){
        var boolean isNextChosen,isCurrChosen;

        let isNextChosen = false;
        let isCurrChosen = false;

        if (isArrow(key)){

            if (key = 131 & cursor.validateMove(false,-1,false)) { 
                let isNextChosen = table.isCoordStroke(cursor.getMove(1));
                let isCurrChosen = table.isCoordStroke(cursor.getPos());

                do cursor.moveUp(isNextChosen,isCurrChosen);
            }   
     
            if (key = 133 & cursor.validateMove(false,1,false)) {
                let isNextChosen = table.isCoordStroke(cursor.getMove(2));
                let isCurrChosen = table.isCoordStroke(cursor.getPos());

                do cursor.moveDown(isNextChosen,isCurrChosen);
            }  
     
            if (key = 130 & cursor.validateMove(true,-1,false)) { 
                let isNextChosen = table.isCoordStroke(cursor.getMove(3));
                let isCurrChosen = table.isCoordStroke(cursor.getPos());

                do cursor.moveLeft(isNextChosen,isCurrChosen);
            }  
     
            if (key = 132  & cursor.validateMove(true,1,false)) { 
                let isNextChosen = table.isCoordStroke(cursor.getMove(4));
                let isCurrChosen = table.isCoordStroke(cursor.getPos());

                do cursor.moveRight(isNextChosen,isCurrChosen);
            }   
            return 0;
        }

        if (key = 128){
            if (table.isComputerSquareStroke(cursor.getPos())){
                return 0;
            }
            do Sys.wait(100);
            do cursor.removeCursor();
            return table.strikeComputer(cursor.getPos());
        }

        return 0;
    }

    method  boolean isArrow(int key){
        return ((key>129) & (key < 134));
    }
    
}