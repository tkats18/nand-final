// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/10/Square/Square.jack

// (same as projects/09/Square/Square.jack)

/** Implements a graphical square. */
class Square {

    field int x, y, index, shipIndex; // screen location of the square's top-left corner
    field int size; // length of this square, in pixels

    field boolean isChosen, isSunk, isStroke;

 
    /** Constructs a new square with a given location and size. */
    constructor Square new(int Ax, int Ay, int ind, int Asize) {
       
        let x = Ax;
        let y = Ay;
        let size = Asize;
        let index = ind;
        let isChosen = false;
        let shipIndex = -1;
        let isSunk = false;
        let isStroke = false;

        do draw();
        return this;
    }
 
    /** Disposes this square. */
    method void dispose() {
       do Memory.deAlloc(this);
       return;
    }

    method void choose(){
        let isChosen = true;
        do fillSquare();
        return;
    }

    method void setIsChosen(){
      let isChosen = (~(isChosen));
      return;
    }

    method boolean getIsChosen(){
        return isChosen;
    }

    method int getIndex(){
       return index;
    }

    method boolean getIsSunk(){
       return isSunk;
    }

    method boolean getIsStroke(){
      return isStroke;
   }

    method int getShipIndex(){
       return shipIndex;
    }

    method void setShipIndex(int ind){
       let shipIndex = ind;
       return;
    }

    method void fillSquare(){
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }
 
    /** Draws the square on the screen. */
    method void draw() {
       
       do Screen.setColor(true);

       do Screen.drawLine(x, y, x, y+size );
       do Screen.drawLine(x, y, x+size, y );
       do Screen.drawLine(x+size, y, x+size, y+size );
       do Screen.drawLine(x, y+size, x+size, y+size );

       return;
    }
 
    /** Erases the square from the screen. */
    method void erase() {
       
       do Screen.setColor(false);
       do Screen.drawRectangle(x+1, y+1, x + size-1, y + size-1);
       return;
    }

    method void drawDiezi(){
      do erase();
      do Screen.setColor(true);

      do Screen.drawLine(x+6, y+2, x+6,y+18 );
      do Screen.drawLine(x+12, y+2, x+12,y+18 );

      do Screen.drawLine(x+2, y+6, x+18,y+6 );
      do Screen.drawLine(x+2, y+12, x+18,y+12 );

      return;
    }

    method void drawDzaxili(){
      do erase();
      do Screen.setColor(true);

      do Screen.drawLine(x+9, y+2, x+9, y+12 );
      do Screen.drawLine(x+10, y+2, x+10, y+12 );
      do Screen.drawLine(x+11, y+2, x+11, y+12 );

      do Screen.drawCircle(x+10,y+16,2);    

      return;
    }

    method void drawX(){
      do erase();
      do Screen.setColor(true);

      do Screen.drawLine(x+3, y+3, x+size-4, y+size-4 );
      do Screen.drawLine(x+size-4, y+3, x+3, y+size-4 );

     return;
   }

    method int strike(){
       if (isChosen){
         do drawDzaxili();
         let isSunk = true;
       }else{
         do drawDiezi();
       }

       let isStroke = true;
       return shipIndex;
    }
 
 

   method int getX(){
       return x;
    }

   method int getY(){
      return y;
   }
   
   method Coord getPos() {
      var Coord res;
      let res = Coord.new( index - (10* Math.divide(index,10))  ,Math.divide(index,10)); 
      return res;
   }

   method void printPos(){
      var Math m;
      let m = Math.new();

      do Output.printString("( ");
      do Output.printInt(m.divide(shipIndex,10));
      do Output.printString(" , ");
      do Output.printInt(shipIndex - (10 * m.divide(shipIndex,10)));
      do Output.printString(" ) ");
      do Output.println();

      return;
  }

 }
 